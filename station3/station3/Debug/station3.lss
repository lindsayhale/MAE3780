
station3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  0000021a  000002ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000021a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080010e  0080010e  000002bc  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000002bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000988  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000a1f  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000058  00000000  00000000  00000a4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000004fa  00000000  00000000  00000aa6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000002ba  00000000  00000000  00000fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000332  00000000  00000000  0000125a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000088  00000000  00000000  0000158c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001bd  00000000  00000000  00001614  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000001f7  00000000  00000000  000017d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000030  00000000  00000000  000019c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 81 00 	jmp	0x102	; 0x102 <__vector_5>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e1       	ldi	r30, 0x1A	; 26
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e0       	ldi	r26, 0x0E	; 14
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 31       	cpi	r26, 0x14	; 20
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <main>
  9e:	0c 94 0b 01 	jmp	0x216	; 0x216 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <put_char>:
static int put_char(char c, FILE *stream);
static FILE uart_str = FDEV_SETUP_STREAM(put_char, NULL, _FDEV_SETUP_WRITE);

// Transmit one character
static int put_char(char c, FILE *stream) {
	loop_until_bit_is_set(UCSR0A, UDRE0);	// wait for data register (UDR0) to clear
  a6:	e0 ec       	ldi	r30, 0xC0	; 192
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	90 81       	ld	r25, Z
  ac:	95 ff       	sbrs	r25, 5
  ae:	fd cf       	rjmp	.-6      	; 0xaa <put_char+0x4>
	UDR0 = c;								//send the character
  b0:	80 93 c6 00 	sts	0x00C6, r24
	return 0;
}
  b4:	80 e0       	ldi	r24, 0x00	; 0
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	08 95       	ret

000000ba <init_uart>:

// Initialization of the UART. See data sheet to understand these settings.
void init_uart(void) { 						// 8 bit, 1 stop bit, no parity
	UCSR0B=_BV(TXEN0);						// Enable transmit
  ba:	88 e0       	ldi	r24, 0x08	; 8
  bc:	80 93 c1 00 	sts	0x00C1, r24
	UBRR0L = 51;							// scale from 16 MHz main clock to 19200 baud rate.
  c0:	83 e3       	ldi	r24, 0x33	; 51
  c2:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H = 0;
  c6:	10 92 c5 00 	sts	0x00C5, r1
	stdout = &uart_str; 					//set the output stream
  ca:	80 e0       	ldi	r24, 0x00	; 0
  cc:	91 e0       	ldi	r25, 0x01	; 1
  ce:	90 93 11 01 	sts	0x0111, r25
  d2:	80 93 10 01 	sts	0x0110, r24
  d6:	08 95       	ret

000000d8 <wheelSetup>:
#define WHEELIE2_H

void wheelSetup(){ //PWM
	
	//set timers:
	TCCR1A |= (1<<WGM10) | (1<< COM1A1) | (1<< COM1A0)| (1<< COM1B1)| (1<< COM1B0);
  d8:	e0 e8       	ldi	r30, 0x80	; 128
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	81 6f       	ori	r24, 0xF1	; 241
  e0:	80 83       	st	Z, r24
	TCCR2A |= (1<<WGM20) | (1<<COM2A1) | (1<< COM2A0);
  e2:	e0 eb       	ldi	r30, 0xB0	; 176
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	81 6c       	ori	r24, 0xC1	; 193
  ea:	80 83       	st	Z, r24

	OCR1A |= 0x0000; //Duty cycle 100%
  ec:	e8 e8       	ldi	r30, 0x88	; 136
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	91 81       	ldd	r25, Z+1	; 0x01
  f4:	91 83       	std	Z+1, r25	; 0x01
  f6:	80 83       	st	Z, r24
	OCR2A |= 0x0000;
  f8:	e3 eb       	ldi	r30, 0xB3	; 179
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	80 83       	st	Z, r24
 100:	08 95       	ret

00000102 <__vector_5>:
#include <util/delay.h>
#include "wheelie2.h"
//#include "QTI1.h"


ISR(PCINT2_vect){
 102:	1f 92       	push	r1
 104:	0f 92       	push	r0
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	0f 92       	push	r0
 10a:	11 24       	eor	r1, r1
 10c:	2f 93       	push	r18
 10e:	8f 93       	push	r24
 110:	9f 93       	push	r25
 112:	ef 93       	push	r30
 114:	ff 93       	push	r31
	//Interrupt for QTI's
	//FIX ME: does it sense the other robot when front 1 QTI's go off???
	if ((~PIND & (1<<PD2)) && (~PIND & 1<<PD3)) { //both pin PD1 and PD0
 116:	4a 99       	sbic	0x09, 2	; 9
 118:	35 c0       	rjmp	.+106    	; 0x184 <__vector_5+0x82>
 11a:	4b 99       	sbic	0x09, 3	; 9
 11c:	33 c0       	rjmp	.+102    	; 0x184 <__vector_5+0x82>
		PORTB &= 0b11110000; //stops
 11e:	85 b1       	in	r24, 0x05	; 5
 120:	80 7f       	andi	r24, 0xF0	; 240
 122:	85 b9       	out	0x05, r24	; 5
		PORTB |=  (1<<PB0) | (1<<PB2); //backwards
 124:	85 b1       	in	r24, 0x05	; 5
 126:	85 60       	ori	r24, 0x05	; 5
 128:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12a:	2f ef       	ldi	r18, 0xFF	; 255
 12c:	83 ed       	ldi	r24, 0xD3	; 211
 12e:	90 e3       	ldi	r25, 0x30	; 48
 130:	21 50       	subi	r18, 0x01	; 1
 132:	80 40       	sbci	r24, 0x00	; 0
 134:	90 40       	sbci	r25, 0x00	; 0
 136:	e1 f7       	brne	.-8      	; 0x130 <__vector_5+0x2e>
 138:	00 c0       	rjmp	.+0      	; 0x13a <__vector_5+0x38>
 13a:	00 00       	nop
		_delay_ms(1000);
		PORTB &= 0b11110000; //stops
 13c:	85 b1       	in	r24, 0x05	; 5
 13e:	80 7f       	andi	r24, 0xF0	; 240
 140:	85 b9       	out	0x05, r24	; 5
 142:	2f ef       	ldi	r18, 0xFF	; 255
 144:	83 ed       	ldi	r24, 0xD3	; 211
 146:	90 e3       	ldi	r25, 0x30	; 48
 148:	21 50       	subi	r18, 0x01	; 1
 14a:	80 40       	sbci	r24, 0x00	; 0
 14c:	90 40       	sbci	r25, 0x00	; 0
 14e:	e1 f7       	brne	.-8      	; 0x148 <__vector_5+0x46>
 150:	00 c0       	rjmp	.+0      	; 0x152 <__vector_5+0x50>
 152:	00 00       	nop
		_delay_ms(1000);
		PORTB|= (1<<PB1) | (1<<PB2) ; //right
 154:	85 b1       	in	r24, 0x05	; 5
 156:	86 60       	ori	r24, 0x06	; 6
 158:	85 b9       	out	0x05, r24	; 5
 15a:	2f ef       	ldi	r18, 0xFF	; 255
 15c:	81 e1       	ldi	r24, 0x11	; 17
 15e:	9a e7       	ldi	r25, 0x7A	; 122
 160:	21 50       	subi	r18, 0x01	; 1
 162:	80 40       	sbci	r24, 0x00	; 0
 164:	90 40       	sbci	r25, 0x00	; 0
 166:	e1 f7       	brne	.-8      	; 0x160 <__vector_5+0x5e>
 168:	00 c0       	rjmp	.+0      	; 0x16a <__vector_5+0x68>
 16a:	00 00       	nop
		_delay_ms(2500); //delay
		
		OCR1A |= 0xb000; //Duty cycle 50%
 16c:	e8 e8       	ldi	r30, 0x88	; 136
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	80 81       	ld	r24, Z
 172:	91 81       	ldd	r25, Z+1	; 0x01
 174:	90 6b       	ori	r25, 0xB0	; 176
 176:	91 83       	std	Z+1, r25	; 0x01
 178:	80 83       	st	Z, r24
		OCR2A |= 0xb000;     
 17a:	e3 eb       	ldi	r30, 0xB3	; 179
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	80 81       	ld	r24, Z
 180:	80 83       	st	Z, r24
 182:	26 c0       	rjmp	.+76     	; 0x1d0 <__vector_5+0xce>
		
	} else if (~PIND & 1<<PD2){ // turn left
 184:	4a 99       	sbic	0x09, 2	; 9
 186:	0e c0       	rjmp	.+28     	; 0x1a4 <__vector_5+0xa2>
		PORTB &= 0b11110000; //stops
 188:	85 b1       	in	r24, 0x05	; 5
 18a:	80 7f       	andi	r24, 0xF0	; 240
 18c:	85 b9       	out	0x05, r24	; 5
		PORTB |= (1<<PB3); //turn left
 18e:	2b 9a       	sbi	0x05, 3	; 5
 190:	2f ef       	ldi	r18, 0xFF	; 255
 192:	89 e6       	ldi	r24, 0x69	; 105
 194:	98 e1       	ldi	r25, 0x18	; 24
 196:	21 50       	subi	r18, 0x01	; 1
 198:	80 40       	sbci	r24, 0x00	; 0
 19a:	90 40       	sbci	r25, 0x00	; 0
 19c:	e1 f7       	brne	.-8      	; 0x196 <__vector_5+0x94>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <__vector_5+0x9e>
 1a0:	00 00       	nop
 1a2:	16 c0       	rjmp	.+44     	; 0x1d0 <__vector_5+0xce>
		_delay_ms(500); //delay half sec
		
	} else if (~PIND & 1<<PD3){ // turn right
 1a4:	4b 99       	sbic	0x09, 3	; 9
 1a6:	0e c0       	rjmp	.+28     	; 0x1c4 <__vector_5+0xc2>
		PORTB &= 0b11110000; //stops
 1a8:	85 b1       	in	r24, 0x05	; 5
 1aa:	80 7f       	andi	r24, 0xF0	; 240
 1ac:	85 b9       	out	0x05, r24	; 5
		PORTB |= (1<<PB1); //turn right
 1ae:	29 9a       	sbi	0x05, 1	; 5
 1b0:	2f ef       	ldi	r18, 0xFF	; 255
 1b2:	89 e6       	ldi	r24, 0x69	; 105
 1b4:	98 e1       	ldi	r25, 0x18	; 24
 1b6:	21 50       	subi	r18, 0x01	; 1
 1b8:	80 40       	sbci	r24, 0x00	; 0
 1ba:	90 40       	sbci	r25, 0x00	; 0
 1bc:	e1 f7       	brne	.-8      	; 0x1b6 <__vector_5+0xb4>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <__vector_5+0xbe>
 1c0:	00 00       	nop
 1c2:	06 c0       	rjmp	.+12     	; 0x1d0 <__vector_5+0xce>
		_delay_ms(500); //delay half sec
		
	} else { //no white under any sensors
		//drive
		PORTB &= 0b11111010;
 1c4:	85 b1       	in	r24, 0x05	; 5
 1c6:	8a 7f       	andi	r24, 0xFA	; 250
 1c8:	85 b9       	out	0x05, r24	; 5
		PORTB |= (1<<PB3) | (1<<PB1);
 1ca:	85 b1       	in	r24, 0x05	; 5
 1cc:	8a 60       	ori	r24, 0x0A	; 10
 1ce:	85 b9       	out	0x05, r24	; 5
	}
}
 1d0:	ff 91       	pop	r31
 1d2:	ef 91       	pop	r30
 1d4:	9f 91       	pop	r25
 1d6:	8f 91       	pop	r24
 1d8:	2f 91       	pop	r18
 1da:	0f 90       	pop	r0
 1dc:	0f be       	out	0x3f, r0	; 63
 1de:	0f 90       	pop	r0
 1e0:	1f 90       	pop	r1
 1e2:	18 95       	reti

000001e4 <main>:


int main(void){
	
	init_uart();
 1e4:	0e 94 5d 00 	call	0xba	; 0xba <init_uart>
	sei();
 1e8:	78 94       	sei
	//startSonar();
	
	//set up pins
	PCMSK2 |= (1<<PD2) | (1<<PD3);
 1ea:	ed e6       	ldi	r30, 0x6D	; 109
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	80 81       	ld	r24, Z
 1f0:	8c 60       	ori	r24, 0x0C	; 12
 1f2:	80 83       	st	Z, r24
	PCICR |= (1 << PCIE2);
 1f4:	e8 e6       	ldi	r30, 0x68	; 104
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	80 81       	ld	r24, Z
 1fa:	84 60       	ori	r24, 0x04	; 4
 1fc:	80 83       	st	Z, r24
	
	//wheel setup
	DDRB |= (1<<PB0) | (1<<PB1)| (1<<PB2) | (1<<PB3); //make wheel outputs
 1fe:	84 b1       	in	r24, 0x04	; 4
 200:	8f 60       	ori	r24, 0x0F	; 15
 202:	84 b9       	out	0x04, r24	; 4
	
	//PWM
	wheelSetup();
 204:	0e 94 6c 00 	call	0xd8	; 0xd8 <wheelSetup>
	
	while(1){
		//drive
		PORTB &= 0b11111010;
 208:	85 b1       	in	r24, 0x05	; 5
 20a:	8a 7f       	andi	r24, 0xFA	; 250
 20c:	85 b9       	out	0x05, r24	; 5
		PORTB |= (1<<PB3) | (1<<PB1); //drive(0,0)
 20e:	85 b1       	in	r24, 0x05	; 5
 210:	8a 60       	ori	r24, 0x0A	; 10
 212:	85 b9       	out	0x05, r24	; 5
 214:	f9 cf       	rjmp	.-14     	; 0x208 <main+0x24>

00000216 <_exit>:
 216:	f8 94       	cli

00000218 <__stop_program>:
 218:	ff cf       	rjmp	.-2      	; 0x218 <__stop_program>
